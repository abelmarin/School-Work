# Problem 1from random import randintdef forPoint(initialRoll):    while True:        roll = randint(1,6) + randint(1,6)        if roll == 7:            return 0        elif roll == initialRoll:            return 1def craps():    roll = randint(1,6) + randint(1,6)    if roll in [7, 11]:        return 1    elif roll not in [2, 3, 12]:        return forPoint(roll)    else: # roll in [2, 3, 12]        return 0def testCraps(n):    wins = 0    for i in range(n):        wins += craps()    return wins/float(n)           from math import sqrtclass Point:    'class that represents a point in the plane'    def __init__(self, xcoord, ycoord):        'constructor for a point with coordinates xcoord and ycoord'        self.x = xcoord        self.y = ycoord    # Exercise 8.10 solution    def distance(self, p):        'returns distance to point p'        return sqrt((self.x - p.x)**2 + (self.y - p.y)**2)    # Exercise 8.12 solution    def up(self):        'move up 1 unit'        self.move(0, 1)    # Exercise 8.12 solution    def down(self):        'move down 1 unit'        self.move(0, -11)    # Exercise 8.12 solution    def left(self):        'move left 1 unit'        self.move(-1, 0)    # Exercise 8.12 solution    def right(self):        'move right 1 unit'        self.move(1, 0)    def setx(self, xcoord):        'set x coordinate of point to xcoord'        self.x = xcoord    def sety(self, ycoord):        'set y coordinate of point to ycoord'        self.y = ycoord    def get(self):        'return a tuple with x and y coordinates of the point'        return (self.x, self.y)    def move(self, dx, dy):        'change the x and y coordinates by dx and dy'        self.x += dx        self.y += dyclass Rectangle:    'class that represents rectangles'    # Exercise 8.13 solution    def __init__(self, xcoord=1, ycoord=1):        'init constructor'        self.x = xcoord        self.y = ycoord            def setSize(self, xcoord, ycoord):        'constructor'        self.x = xcoord        self.y = ycoord    def perimeter(self):        'returns perimeter of rectangle'        return 2 * (self.x + self.y)    def area(self):        'returns area of rectangle'        return self.x * self.y# Problem 8.20class BankAccount:    'a bank account class'    def __init__(self, initial=0):        'constructor'        self.b = initial    def withdraw(self, amount):        'withdraws amount'        self.b -= amount    def deposit(self,amount):        'deposits amount'        self.b += amount    def balance(self):        'returns balance'        return self.b# Problem 8.24from time import localtimeclass Person:    'person class'    def __init__(self, name, birthYear):        'constructs person with given name and birth year'        self.personName = name        self.birthYear = birthYear    def age(self):        'computes and returns person age'        return localtime()[0] - self.birthYear    def name(self):        'returns person name'        return self.personName# Problem 8.33class pseudorandom:    'linear congruential pseudorandom number generator'    def __init__(self, seed, multiplier, increment, modulus):        '''contructs a generator with given seed, multiplier,           increment, and modulus'''        self.seed = seed        self.multiplier = multiplier        self.increment = increment        self.modulus = modulus    def next(self):        'returns next pseudorandom number'        self.seed = (self.multiplier*self.seed+self.increment)%self.modulus        return self.seed